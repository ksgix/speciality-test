import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.helpers import escape_markdown
from config import RESULTS_FOLDER, QUESTION_COUNT, QUESTIONS, SPECIALTIES_DATA, QUESTION, RESULT, OPTIONS_KEY
from utils import get_top_professions
import os
import json
from datetime import datetime

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö."""
    info_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "ü§ñ *–û –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.\n\n"
        "üìù *–û —Ç–µ—Å—Ç–µ*\n"
        f"‚Ä¢ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {QUESTION_COUNT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: –æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π\n\n"
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n"
        "‚Ä¢ /test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test."
    )
    await update.message.reply_markdown_v2(escape_markdown(info_text, version=2))


async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞."""
    logger.info(f"User {update.effective_user.id} started the test with /test command.")

    test_start_text = (
        f"–û—Ç–ª–∏—á–Ω–æ üëç\n"
        f"–°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç –∏–∑ {QUESTION_COUNT} –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ "
        f"–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏.\n\n"
        f"–í—ã–±–∏—Ä–∞–π –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n"
        f"–ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
    )
    await update.message.reply_markdown_v2(escape_markdown(test_start_text, version=2))

    context.user_data['question_number'] = 0
    context.user_data['answers'] = {}
    context.user_data['profession_scores'] = {}

    return await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å."""
    question_number = context.user_data.get('question_number', 0)
    logger.info(f"Asking question {question_number + 1} to user {update.effective_user.id}.")

    if question_number >= QUESTION_COUNT:
        return await show_results(update, context)

    question_data = QUESTIONS[question_number]
    keyboard = [
        [InlineKeyboardButton(answer['text'], callback_data=f"{question_number}_{index}")]
        for index, answer in enumerate(question_data[OPTIONS_KEY])
    ]

    if question_number > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{question_number}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    question_text = f"*–í–æ–ø—Ä–æ—Å {question_number + 1} –∏–∑ {QUESTION_COUNT}*\n\n{question_data['question']}"

    if 'message_id' not in context.user_data:
        message = await update.message.reply_text(
            text=question_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        context.user_data['message_id'] = message.message_id
        context.user_data['chat_id'] = update.effective_chat.id
    else:
        await context.bot.edit_message_text(
            text=question_text,
            parse_mode='Markdown',
            chat_id=context.user_data['chat_id'],
            message_id=context.user_data['message_id'],
            reply_markup=reply_markup
        )

    return QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()  # Always acknowledge the query

    try:
        data_parts = query.data.split('_')
        if len(data_parts) != 2 and data_parts[0] != "back":
            raise ValueError(f"Invalid callback_data format: {query.data}")

        if data_parts[0] == "back":
            question_number = int(data_parts[1])
            context.user_data['question_number'] = question_number - 1

            if question_number - 1 in context.user_data['answers']:
                last_answer = context.user_data['answers'].pop(question_number - 1)
                if 'scores' in last_answer:
                    for specialty, score in last_answer['scores'].items():
                        if specialty in context.user_data['profession_scores']:
                            context.user_data['profession_scores'][specialty] -= score
                            if context.user_data['profession_scores'][specialty] <= 0:
                                context.user_data['profession_scores'].pop(specialty)

            return await ask_question(update, context)

        question_index, answer_index = map(int, data_parts)

        if question_index < 0 or question_index >= QUESTION_COUNT or answer_index < 0 or answer_index >= len(QUESTIONS[question_index]['options']):
            raise ValueError(f"Indices out of range: {question_index}, {answer_index}")

        answer_data = QUESTIONS[question_index]['options'][answer_index]
        context.user_data['answers'][question_index] = answer_data

        for specialty, score in answer_data.get('scores', {}).items():
            context.user_data['profession_scores'].setdefault(specialty, 0)
            context.user_data['profession_scores'][specialty] += score

        chosen_answer_text = answer_data['text']
        logger.info(f"User {update.effective_user.id} answered question {question_index + 1}: '{chosen_answer_text}'")

        context.user_data['question_number'] += 1

        if context.user_data['question_number'] < QUESTION_COUNT:
            return await ask_question(update, context)
        else:
            return await show_results(update, context, query)

    except Exception as e:
        logger.error(f"Error processing answer for user {update.effective_user.id}: {e}", exc_info=True)
        await query.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /test."
        )
        return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE, query=None) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö."""
    logger.info(f"Showing test results to user {update.effective_user.id}.")
    try:
        profession_scores = context.user_data.get('profession_scores', {})

        if not profession_scores:
            message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /test."
            if query:
                await query.edit_message_text(text=message_text)
            else:
                await update.message.reply_text(message_text)
            return ConversationHandler.END

        top_specialties_data = get_top_professions(profession_scores)
        context.user_data['top_specialties'] = top_specialties_data

        result_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞*\n\n"
        result_text += "\n‚ú® *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*:\n"

        if top_specialties_data:
            for i, spec_data in enumerate(top_specialties_data, 1):
                # CORRECTED LINE: Removed the ( and ) around the sphere
                result_text += f"{i}. *{spec_data['specialty']}*\n  {spec_data['description']}\n   –ë–∞–ª–ª—ã: {spec_data['score']}\n\n"
        else:
            result_text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n"

        # Save results *before* sending the message, so even if sending fails, we have the data
        user_id = update.effective_user.id
        username = update.effective_user.username or "anonymous"

        result_data = {
            "user_id": user_id,
            "username": username,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "top_specialties": context.user_data.get('top_specialties', []),
            "profession_scores": context.user_data.get('profession_scores', {}),
        }

        file_path = os.path.join(RESULTS_FOLDER, f"result_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            save_success = True
            result_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!"  
        except Exception as e:
            logger.error(f"Error saving results for user {update.effective_user.id}: {e}", exc_info=True)
            save_success = False
            result_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!"  

        if query:
            await query.edit_message_text(
                text=result_text,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=result_text,
                parse_mode='Markdown'
            )

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error showing results to user {update.effective_user.id}: {e}", exc_info=True)
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /test."
        if query:
            await query.edit_message_text(text=error_message)
        else:
            await update.message.reply_text(error_message)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∞."""
    logger.info(f"User {update.effective_user.id} cancelled the test with /cancel command.")
    await update.message.reply_text(
        "–¢–µ—Å—Ç –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /test."
    )
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("test", start_test)],
    states={
        QUESTION: [CallbackQueryHandler(handle_answer)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)